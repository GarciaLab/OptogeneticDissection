function [kon_curve, n_bound_curve] = predict_kon_curve(repressorCVec,kon0,eInteraction,eCoop,kb0,n_bs,n_calc_points)
% this script calculates transition rate matrices and state probabilities
% for a simple chain occupancy model in order to generate a predicted
% Knirps binding curve, as well as a corresponding kon input-output
% function
% clear
% close all
% addpath(genpath('lib'))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% define basic hyperparameters and symbols
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% n_bs = 16; % number of Bcd binding sites
n_states = n_bs + 1; % total number of states
n_bound_vec = 0:n_bs; % vector encoding # bound in each state
off_rate_basal = 1/1.264; % in seconds. This sets overall system timescales (from Mir et al, 2018)

%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (1) Calculations for simple chain model with and without cooperativity
%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Since we are assuming that our system is a linear markov chain, it follows 
% that the chain must be in thermodynamic equilbrium. Thus we will take 
% the approach of first calculating how the relative occupancies of each 
% state in the chain change as a function of binding/unbinding cooparativity 
% terms. Kinetics can then be specified by invoking measured timescales for
% Bcd unbinding (Mir et al 2018). Note that all energies are in kT units

% set save paths
% project = ['n' num2str(n_bs) ]; % project identifier

% DataPath = ['./data/knirps_binding_model/' project '/'];
% mkdir(DataPath)

% accounting for state state multplicities

% Since our states correspond to a certain # bound and NOT the
% bound/unbound state of each site, there are multiple ways to realize each
% state. For instance, there are 6! / (4! x 2!) = 15 ways to get 2 Bcd moleCoopules
% bound to the enhancer. These multiplicities must be accounted for in our
% effective state energies

mult_vec = NaN(size(n_bound_vec));
for w = 1:length(mult_vec)
  mult_vec(w) = factorial(n_bs) ./ (factorial(n_bs-n_bound_vec(w)) .*factorial(n_bound_vec(w)));
end
mu_vec = -log(mult_vec); % energy contribution from state multiplicities

%% Generate helper functions to calculate predicted kon curve as a function of
%%%the basal Knirps binding rate, cooperativity strength, and the strength
%%%of Knirps interactions with the activation step
% kon0 = 3.2;
% eInteraction = 0.95;
% kb0 = 1;
% eCoop = -0.05;

% n_calc_points = 100;
% repressorCVec = linspace(0.001,10,n_calc_points);
stateEnergy_fun = @(eb,ec) eb*n_bound_vec + ec*n_bound_vec.*(n_bound_vec-1)/2 + mu_vec;
stateProb_fun = @(eb,ec) exp(-stateEnergy_fun(eb,ec)) / sum(exp(-stateEnergy_fun(eb,ec)));

P_coop_array = NaN(n_states,n_calc_points);
% P_ind_array = NaN(n_states,n_calc_points);

% calculate metrics for (a) and (b) first
for eb = 1:length(repressorCVec)  
  eb_eff = log(off_rate_basal/(kb0*repressorCVec(eb)));
  if isinf(eb_eff) % this deals with case when [Knirps] input is 0
    eb_eff = realmax/10;
  end
  % independent binding
%   state_probs_ind = stateProb_fun(eb_eff,0);  
%   P_ind_array(:,eb) = state_probs_ind;
  
  % cooperativity
  state_probs_coop = stateProb_fun(eb_eff,eCoop);    
  P_coop_array(:,eb) = state_probs_coop;  

end

% solve for mean number of knirps bound, and for the effective ON rate
n_bound_curve = sum(P_coop_array.*n_bound_vec');
kon_vec = kon0.*exp(-n_bound_vec'*eInteraction);
% kon_vec = kon0*(n_bs-n_bound_vec')/n_bs;
kon_curve = sum(P_coop_array.*kon_vec,1);

% solve for effective on and off rates (0<->6). This is not strictly necessary but
% will be used as a consistency check that stochastic simulations are
% behaving as expected

% initialize arrays
% eff_ton_ind_vec = NaN(1,n_calc_points);
% eff_toff_ind_vec = NaN(1,n_calc_points);
% 
% eff_ton_on_coop_vec = NaN(1,n_calc_points);
% eff_toff_on_coop_vec = NaN(1,n_calc_points);
% 
% eff_ton_off_coop_vec = NaN(1,n_calc_points);
% eff_toff_off_coop_vec = NaN(1,n_calc_points);
% 
% % specify states from which to calculate on/off rates. This choice is
% % somewhat arbitrary, but we know kon must be from a low state to a high
% % state and koff must by high->low
% calc_vec = [1 n_states];
% 
% for eb = 1:length(repressorEnergyVec) 
%   % ind
%   [eff_ton_ind_vec(eb), eff_toff_ind_vec(eb)] = pt_solve(Q_ind_array(:,:,eb),calc_vec(1),calc_vec(2));
%   
%   % koff-mediated cooperativity
%   [eff_ton_on_coop_vec(eb), eff_toff_on_coop_vec(eb)] = pt_solve(Q_coop_on_array(:,:,eb),calc_vec(1),calc_vec(2));
% 
%   % kon-mediated cooperativity
%   [eff_ton_off_coop_vec(eb), eff_toff_off_coop_vec(eb)] = pt_solve(Q_coop_off_array(:,:,eb),calc_vec(1),calc_vec(2)); 
% end